from aiogram import *
from aiogram.filters import *
from aiogram.types import *
from functions import *
from bot_token import BOT_TOKEN
import sqlite3

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–û–ô –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•
db = sqlite3.connect('database.sqlite')
cursor = db.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS data (
    id INTEGER,
    admin BOOL,
    nick TEXT,
    in_game BOOL,
    in_competition BOOL,
    secret INTEGER, 
    attempts INTEGER,
    segment INTEGER,
    games INTEGER,
    wins INTEGER,
    competitions INTEGER,
    comp_wins INTEGER,
    win_percent INTEGER,
    comp_win_percent INTEGER)
''')

db.commit()


# –í–û–ó–í–†–ê–©–ê–ï–¢ –°–ü–ò–°–û–ö –õ–ò–î–ï–†–û–í –ü–û –£–ë–´–í–ê–ù–ò–Æ (–°–ü–ò–°–û–ö –ò–ó –°–ü–ò–°–ö–û–í –í–ò–î–ê [–ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤ —Å–æ—Ä–µ–≤–∞—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä, –Ω–∏–∫]
def make_liders():
    liders = []
    for value in cursor.execute(f"SELECT comp_win_percent, comp_wins, nick FROM data"):
        liders.append(value)
    return sorted(liders, reverse=True)


# –í–û–ó–í–†–ê–©–ê–ï–¢ –°–ü–ò–°–û–ö –Æ–ó–ï–†–û–í (–°–ü–ò–°–ö–ò –í–ò–î–ê [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥])
def make_users():
    users = []
    for value in cursor.execute(f"SELECT games, competitions, wins FROM data"):
        users.append(value)
    return users


# –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –í–´–¢–ê–°–ö–ò–í–ê–ï–¢ –ò–ó –ë–î –ù–£–ñ–ù–£–Æ –Ø–ß–ï–ô–ö–£
def sel_data(key: str, message: Message):
    return cursor.execute(f"SELECT {key} FROM data WHERE id = {message.from_user.id}").fetchone()[0]


# –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–Ø–ï–¢ –í –ë–î –ù–£–ñ–ù–£–Æ –Ø–ß–ï–ô–ö–£
def update_data(key: str, new_info: any, message: Message):
    if isinstance(new_info, str):
        cursor.execute(f"UPDATE data SET {key} = '{new_info}' WHERE id = {message.from_user.id}")
        db.commit()
    else:
        cursor.execute(f"UPDATE data SET {key} = {new_info} WHERE id = {message.from_user.id}")
        db.commit()


# –í–ù–ï–î–†–ï–ù–ò–ï –ö–ù–û–ü–û–ö –í –ú–ï–ù–Æ–®–ö–ï –ò –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–Æ–®–ù–û–ô –ö–õ–ê–í–´
competition_button = KeyboardButton(text='–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è!üèÜ')
play_button = KeyboardButton(text='–ò–≥—Ä–∞—Ç—å!üé≤')
stat_buttin = KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìñ')
liders_button = KeyboardButton(text='–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤üèÖ')
help_keyboard = ReplyKeyboardMarkup(keyboard=[[competition_button, play_button],
                                              [stat_buttin, liders_button]],
                                    resize_keyboard=True)

# –í–ù–ï–î–†–ï–ù–ò–ï –ö–ù–û–ü–û–ö –° –ü–û–ü–´–¢–ö–ê–ú–ò –ò –°–û–ó–î–ê–ù–ò–ï –ü–û–ü–´–¢–û–ß–ù–û–ô –ö–õ–ê–í–´
button_4 = KeyboardButton(text='(4)')
button_5 = KeyboardButton(text='(5)')
button_6 = KeyboardButton(text='(6)')
button_7 = KeyboardButton(text='(7)')
button_8 = KeyboardButton(text='(8)')
button_9 = KeyboardButton(text='(9)')
attempts_keyboard = ReplyKeyboardMarkup(keyboard=[[button_4, button_5, button_6],
                                                  [button_7, button_8, button_9]],
                                        resize_keyboard=True)

# –í–ù–ï–î–†–ï–ù–ò–ï –ö–ù–û–ü–û–ö –° –î–ò–ê–ü–ê–ó–û–ù–ê–ú–ò –ò –°–û–ó–î–ê–ù–ò–ï –î–ò–ê–ü–ê–ó–û–ù–ù–û–ô –ö–õ–ê–í–´
button_50 = KeyboardButton(text='(1-50)')
button_75 = KeyboardButton(text='(1-75)')
button_100 = KeyboardButton(text='(1-100)')
button_150 = KeyboardButton(text='(1-150)')
button_200 = KeyboardButton(text='(1-200)')
button_300 = KeyboardButton(text='(1-300)')
segment_keyboard = ReplyKeyboardMarkup(keyboard=[[button_50, button_75, button_100],
                                                 [button_150, button_200, button_300]],
                                       resize_keyboard=True)


# –í–ù–ï–î–†–ï–ù–ò–ï –ö–ù–û–ü–û–ö –° –°–û–ì–õ–ê–°–ò–ï–ú –ò –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–ù–ò–ù–ê–ï–ú–û–ô –ú–ï–ù–Æ–®–ö–ò
start_button = KeyboardButton(text='–î–∞! –ò–≥—Ä–∞–µ–ºüòà')
cancel_button = KeyboardButton(text='–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ªüòí')
start_keyboard = ReplyKeyboardMarkup(keyboard=[[start_button, cancel_button]],
                                     resize_keyboard=True)


# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢
@dp.message(CommandStart())
async def start_command(message: Message):
    if (cursor.execute(f"SELECT id FROM data WHERE id = {message.from_user.id}")).fetchone() is None:
        cursor.execute("INSERT INTO data VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, False, '', False, False, 0, 0, 0, 0, 0, 0, 0, 0, 0))
        db.commit()
        await message.answer('–ó–¥–æ—Ä–æ–≤\n–≠—Ç–æ –º–∏–∫—Ä–æ–±–æ—Ç –¥–ª—è –ò–¢–ú–û\n'
                             '–í—Å—ë —ç—Ç–æ –¥–µ–ª–æ —É–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"\n'
                             '–ü—Ä–µ–∂–¥–µ —á–µ–º —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —Ç—É—Ç –≤–æ–æ–±—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n'
                             '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.\n'
                             '–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –ø–∂ üëâüëà')
    elif sel_data("nick", message) == '':
        await message.answer('–ó–∞—Ä–µ–≥–∞–π—Å—è —Å–Ω–∞—á–∞–ª–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å...')
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {sel_data("nick", message)}\n'
                             f'–ù—É... —Ç—ã –∏ —Ç–∞–∫ —É–∂–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —Ç—É—Ç –¥–∞ –∫–∞–∫)')
    if sel_data("in_game", message) or sel_data('"in_competition"', message):
        await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
        update_data("in_game", False, message)
        update_data("in_competition", False, message)


# –í–´–í–û–î –ò–ù–§–´ –ò –ö–ù–û–ü–û–ö –í –ú–ï–ù–Æ–®–ö–ï
@dp.message(Command(commands='help'))
async def help_command(message: Message):
    if not sel_data("nick", message) == '':
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å.')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
        await message.answer('–ò–≥—Ä–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—à–µ–º: –±–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å '
                             '–µ–≥–æ –∑–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n'
                             '–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç, –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –º–µ–Ω—å—à–µ.\n'
                             '–í –∏–≥—Ä–µ –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–∂–∏–º–∞: —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π.\n'
                             '–í —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, '
                             '–∏–º–µ—è –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ 5 –ø–æ–ø—ã—Ç–æ–∫.\n'
                             '–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.\n'
                             '–í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ '
                             '–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–∞–≥–∞–¥—ã–≤–∞–µ–º—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –≤—ã–±–æ—Ä.\n'
                             '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –Ω–µ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—É—é',
                             reply_markup=help_keyboard)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –í–´–í–û–î –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø
@dp.message(Command(commands='menu'))
async def help_command(message: Message):
    if sel_data("nick", message) != '':
        await message.answer('–ù—É –¥–µ—Ä–∂–∏)', reply_markup=help_keyboard)
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å.')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ê–î–ú–ò–ù–ö–ò
@dp.message(F.text == 'I am admin')
async def adminka(message: Message):
    if not sel_data("admin", message):
        update_data("admin", True, message)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ, –∫–∞–∫ –∞–¥–º–∏–Ω—É, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.')
    else:
        await message.answer('–¢—ã –∏ —Ç–∞–∫ –∞–¥–º–∏–Ω–∫–∞, –∑–∞—á–µ–º –µ—â–µ —Ä–∞–∑))')


# –ü–ï–†–í–ê–Ø –†–ï–ü–õ–ò–ö–ê –ü–†–ò –í–´–ë–û–†–ï –°–û–†–ï–í–ù–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê
@dp.message(F.text == '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è!üèÜ')
async def competition(message: Message):
    if sel_data("nick", message) != '':
        await message.answer('–¢—ã –≤—ã–±—Ä–∞–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())
        if not sel_data("in_competition", message):
            update_data("in_competition", True, message)
            update_data("segment", 100, message)
            update_data("secret", generation(100), message)
            update_data("attempts", 5, message)
            await message.answer('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n'
                                 '–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —á–∏—Å–ª–∞, –∞ —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å, –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –∏–ª–∏ –º–µ–Ω—å—à–µ.\n'
                                 '–£ —Ç–µ–±—è –µ—Å—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫.')
        else:
            await message.answer('—è –ù–ï –ó–ù–ê–Æ, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –∫–∞–∫ –±—ã —ç–º... —Ç—ã –∏ —Ç–∞–∫ –≤ –∏–≥—Ä–µ, —Ç–∞–∫ —á—Ç–æ –Ω–µ—á–µ–≥–æ —Ç—É—Ç '
                                 '–±–æ—Ç–∞ –ª–æ–º–∞—Ç—å. –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ')
            if sel_data("in_game", message) or sel_data("in_competition", message):
                update_data("in_game", False, message)
                update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –°–õ–£–ß–ê–ï–¢–°–Ø –í–´–ë–û–† –î–ò–ê–ü–ê–ó–û–ù–ê –ß–ò–°–ï–õ –ù–ê –ò–ì–†–£
@dp.message(F.text == '–ò–≥—Ä–∞—Ç—å!üé≤')
async def segment(message: Message):
    if sel_data("nick", message) != '':
        await message.answer(text='–¢—ã –≤—ã–±—Ä–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–≥–∞–¥—ã–≤–∞–µ–º—ã—Ö —á–∏—Å–µ–ª:', reply_markup=segment_keyboard)
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –°–õ–£–ß–ê–ï–¢–°–Ø –í–´–ë–û–† –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–û–ü–´–¢–û–ö –ù–ê –ò–ì–†–£
@dp.message(F.text.in_(['(1-50)', '(1-75)', '(1-100)', '(1-150)', '(1-200)', '(1-300)']))
async def attempts(message: Message):
    if sel_data("nick", message) != '':
        update_data("segment", int(str(message.text)[3:-1]), message)
        await message.answer('–ü—Ä–∏–Ω—è—Ç–æ!', reply_markup=ReplyKeyboardRemove())
        await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∏–≥—Ä—É:', reply_markup=attempts_keyboard)
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –ü–†–û–ò–°–•–û–î–ò–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê –ò–ì–†–û–ö–ê
@dp.message(F.text.in_(['(4)', '(5)', '(6)', '(7)', '(8)', '(9)']))
async def attempts(message: Message):
    if sel_data("nick", message) != '':
        update_data("attempts", int(str(message.text)[1:-1]), message)
        await message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ {sel_data("segment", message)} '
                             f'c {sel_data("attempts", message)} –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –∑–∞–ø–∞—Å–µ.\n',
                             reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=start_keyboard)
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –†–ï–ê–ö–¶–ò–Ø –ù–ê –û–¢–ú–ï–ù–£ –ò–ì–†–´
@dp.message(F.text == '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ªüòí')
async def beginning_play(message: Message):
    if sel_data("nick", message) != '':
        await message.answer('–ê –∂–∞–ª—å(', reply_markup=ReplyKeyboardRemove())
        if sel_data("in_game", message) or sel_data("in_competition", message):
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –†–ï–ê–ö–¶–ò–Ø –ù–ê –ù–ê–ß–ê–õ–û –ò–ì–†–´
@dp.message(F.text == '–î–∞! –ò–≥—Ä–∞–µ–ºüòà')
async def beginning_play(message: Message):
    if sel_data("nick", message) != '':
        await message.answer(f'–£—Ä–∞!', reply_markup=ReplyKeyboardRemove())
        if not sel_data("in_game", message):
            update_data("in_game", True, message)
            update_data("secret", generation(sel_data("segment", message)), message)
            await message.answer(f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {sel_data("segment", message)}\n'
                                 f'–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —á–∏—Å–ª–∞, –∞ —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å, –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –∏–ª–∏ –º–µ–Ω—å—à–µ.')
        else:
            await message.answer('—è –ù–ï –ó–ù–ê–Æ, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –∫–∞–∫ –±—ã —ç–º... —Ç—ã –∏ —Ç–∞–∫ –≤ –∏–≥—Ä–µ, —Ç–∞–∫ —á—Ç–æ –Ω–µ—á–µ–≥–æ —Ç—É—Ç '
                                 '–±–æ—Ç–∞ –ª–æ–º–∞—Ç—å. –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –í–´–í–û–î–ò–¢ –û–ë–®–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìñ')
async def statistics(message: Message):
    if sel_data("nick", message) != '':
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
        if sel_data("games", message) != 0:
            await message.answer(f'–¢—ã –ø—Ä–æ–≤—ë–ª {sel_data("games", message)} '
                                 f'{quantity_of_games(sel_data("games", message))}.\n'
                                 f'–ò–∑ –Ω–∏—Ö '
                                 f'{round(sel_data("wins", message) / sel_data("games", message) * 100, 1)}'
                                 f'% –ø–æ–±–µ–¥.',
                                 reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer('–¢—ã –µ—â—ë –¥–∞–∂–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–ª, –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ —Ç—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å)',
                                 reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')
    if sel_data("admin", message) and sel_data("games", message) != 0:
        all_games = 0
        all_competitions = 0
        all_vyctory_percents = 0
        all_vyctories = 0
        counter = 0
        users = make_users()
        for i in users:
            all_games += i[0]
            all_competitions += i[1]
            all_vyctories += i[2]
        liders = make_liders()
        for j in liders:
            all_vyctory_percents += j[0]
            if j[0] != 0:
                counter += 1
        if counter != 0:
            average_percent = all_vyctory_percents / counter
        else:
            average_percent = 0
        average_vyctories = round(all_vyctories / all_games * 100, 3)
        await message.answer(f'–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
                             f'–ò–≥—Ä–æ–∫–æ–≤: {len(liders)}\n'
                             f'–í—Å–µ–≥–æ –∏–≥—Ä: {all_games}\n'
                             f'–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {average_vyctories}%\n'
                             f'–í—Å–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: {all_competitions}\n'
                             f'–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {round(average_percent, 3)}%\n')
        text = ''
        for j in range(len(liders)):
            text += f'{j + 1}: {liders[j][2]} - {liders[j][0]}% –ø–æ–±–µ–¥\n'
        await message.answer('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n' + text)


# –í–´–í–û–î –¢–ê–ë–õ–ò–¶–´ –õ–ò–î–ï–†–û–í
@dp.message(F.text == '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤üèÖ')
async def table_lider(message: Message):
    if sel_data("nick", message) != '':
        if sel_data("in_game", message) or sel_data("in_competition", message):
            await message.answer('–¢—ã, –∫—Å—Ç–∞—Ç–∏, –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ)))')
            update_data("in_game", False, message)
            update_data("in_competition", False, message)
        if sel_data("competitions", message) != 0:
            liders = make_liders()
            nicks = []
            for i in liders:
                nicks.append(i[2])
            this_user_number = nicks.index(sel_data("nick", message))
            await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {len(liders)}.\n'
                                 f'–õ–∏–¥–µ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è {liders[0][2]} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º \n'
                                 f'{round(liders[0][0], 1)}% –ø–æ–±–µ–¥ –≤ '
                                 f'{liders[0][1]} {finished_games(liders[0][1])}\n'
                                 f'\n'
                                 f'–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ '
                                 f'{this_user_number + 1}-–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º \n'
                                 f'{round(liders[this_user_number][0], 1)}% –ø–æ–±–µ–¥ –≤ '
                                 f'{liders[this_user_number][1]} '
                                 f'{finished_games(liders[this_user_number][1])}',
                                 reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer('–¢—ã –µ—â—ë –¥–∞–∂–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–ª—Å—è, –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ —Ç—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å)',
                                 reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


# –û–ë–†–ê–ë–û–¢–ö–ê –ß–ò–°–ï–õ –í–û –í–†–ï–ú–Ø –ò–ì–†–´
@dp.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 300)
async def numbers(message: Message):
    if sel_data("nick", message) != '':
        number = int(message.text)
        if number > sel_data("segment", message):
            await message.answer(f'–≠—ç—ç... –≤–æ–æ–±—â–µ-—Ç–æ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - {sel_data("segment", message)}.')
        elif sel_data("in_game", message) or sel_data("in_competition", message):
            if number == sel_data("secret", message):
                await message.answer('–ö—Ä—É—Ç–æ, –∫—Ä—É—Ç–æ. –≠—Ç–æ –ø–æ–±–µ–¥–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!)\n'
                                     '–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑, –∫–æ—Å—Ç—ã–ª—å–Ω–æ —Å–Ω–æ–≤–∞ –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É '
                                     '/menu –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ –≤—ã–±–æ—Ä–∞–º.')
                update_data("wins", sel_data("wins", message) + 1, message)
                update_data("games", sel_data("games", message) + 1, message)
                if sel_data("in_competition", message):
                    update_data("comp_wins", sel_data("comp_wins", message) + 1, message)
                    update_data("competitions", sel_data("competitions", message) + 1, message)
                    update_data("comp_win_percent",
                                round(sel_data("comp_wins", message) /
                                      sel_data("competitions", message) *
                                      100),
                                message)
                update_data("in_game", False, message)
                update_data("in_competition", False, message)
            elif number > sel_data("secret", message):
                update_data("attempts", sel_data("attempts", message) - 1, message)
                if sel_data("attempts", message) > 0:
                    await message.answer('–ù–µ—Ç, –Ω–µ —É–≥–∞–¥–∞–ª, –º–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.')
            else:
                update_data("attempts", sel_data("attempts", message)- 1, message)
                if sel_data("attempts", message) > 0:
                    await message.answer('–ù–µ—Ç, –Ω–µ —É–≥–∞–¥–∞–ª, –º–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.')
            if sel_data("attempts", message) == 0:
                update_data("games", sel_data("games", message) + 1, message)
                if sel_data("in_competition", message):
                    update_data("competitions", sel_data("competitions", message) + 1, message)
                    update_data("comp_win_percent",
                                round(sel_data("wins", message) /
                                      sel_data("games", message) *
                                      100),
                                message)
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª((\n'
                                     f'–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ {sel_data("secret", message)}.\n'
                                     '–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑, –∫–æ—Å—Ç—ã–ª—å–Ω–æ '
                                     '—Å–Ω–æ–≤–∞ –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É /menu –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ –≤—ã–±–æ—Ä–∞–º.')
                update_data("in_game", False, message)
                update_data("in_competition", False, message)
        else:
            await message.answer('–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–∑–≤–∏–Ω–∏—Ç–µ')
    else:
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')


@dp.message(F.content_type != 'text')
async def not_text(message: Message):
    if sel_data("nick", message) == '':
        await message.answer('–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∞–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠')
    else:
        await message.answer('–ù—É –ø—Ä–∏–∫–æ–ª—å–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç, —è —ç—Ç–æ –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –∑–∞–æ–¥–Ω–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∏–¥–∏–æ—Ç–æ–≤)')


# –û–ë–†–ê–ë–û–¢–ö–ê –í–°–Ø–ö–û–ô –ì–ê–î–û–°–¢–ò + –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@dp.message()
async def other_messages(message: Message):
    if sel_data("nick", message) == '':
        liders = make_liders()
        nicks = []
        for i in liders:
            nicks.append(i[2])
        if message.text not in nicks and checking_nickname(message.text) and message.text != '':
            update_data("nick", message.text, message)
            await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, {sel_data("nick", message)}\n'
                                 f'–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –∂–º—è–∫–∞—Ç—å /help')
        elif message.text in liders:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.')
        elif not checking_nickname(message.text):
            await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –ü–û–ñ–ê–õ–£–ô–°–¢–ê.')
        else:
            await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∏—Ç—å—Å—è —ç—Ç–æ –Ω–∞–π–¥–ø–∏—Å–∏, –Ω–æ –ü–û–ñ–ê–õ–£–ô–°–¢–ê –ó–ê–†–ï–ì–ê–ô–°–Ø!!!')
    elif sel_data("in_game", message) or sel_data("in_competition", message):
        if is_number(message.text):
            await message.answer(f'–°–æ—Ä—è–Ω, –Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {sel_data("segment", message)}.')
        else:
            await message.answer(f'–ù—É —ç–π, –º—ã –∂–µ –∏–≥—Ä–∞–µ–º((')
    else:
        await message.answer('–°–æ—Ä—è–Ω, –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —è –≤—Å—ë –ø—Ä–æ–¥—É–º–∞–ª(')

if __name__ == '__main__':
    dp.run_polling(bot)
